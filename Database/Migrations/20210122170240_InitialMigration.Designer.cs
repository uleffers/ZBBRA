// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(ZbbraDBContext))]
    [Migration("20210122170240_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Database.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TrackingAccount")
                        .HasColumnType("bit");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Database.Models.BudgetCategory", b =>
                {
                    b.Property<Guid>("BudgetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryIndex")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BudgetCategoryId");

                    b.HasIndex("CategoryGroupId");

                    b.ToTable("BudgetCategory");
                });

            modelBuilder.Entity("Database.Models.BudgetEntry", b =>
                {
                    b.Property<Guid>("BudgetEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BudgetEntryAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BudgetEntryId");

                    b.HasIndex("BudgetCategoryId");

                    b.ToTable("BudgetEntry");
                });

            modelBuilder.Entity("Database.Models.CategoryGroup", b =>
                {
                    b.Property<Guid>("CategoryGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryGroupIndex")
                        .HasColumnType("int");

                    b.Property<string>("CategoryGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryGroupId");

                    b.ToTable("CategoryGroup");
                });

            modelBuilder.Entity("Database.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BudgetCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncomeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetCategoryId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Database.Models.BudgetCategory", b =>
                {
                    b.HasOne("Database.Models.CategoryGroup", "CategoryGroup")
                        .WithMany("BudgetCategories")
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryGroup");
                });

            modelBuilder.Entity("Database.Models.BudgetEntry", b =>
                {
                    b.HasOne("Database.Models.BudgetCategory", "BudgetCategory")
                        .WithMany("BudgetEntries")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetCategory");
                });

            modelBuilder.Entity("Database.Models.Transaction", b =>
                {
                    b.HasOne("Database.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.BudgetCategory", "BudgetCategory")
                        .WithMany("Transactions")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("BudgetCategory");
                });

            modelBuilder.Entity("Database.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Database.Models.BudgetCategory", b =>
                {
                    b.Navigation("BudgetEntries");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Database.Models.CategoryGroup", b =>
                {
                    b.Navigation("BudgetCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
